name: Test Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.13.0
      uses: actions/setup-node@v4
      with:
        node-version: 18.13.0

    - name: Cache client dependencies
      id: client-cache
      uses: actions/cache@v4
      with:
        path: client/node_modules
        key: client-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('client/package-lock.json') }}
        restore-keys: |
          client-${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install client dependencies
      if: steps.client-cache.outputs.cache-hit != 'true'
      working-directory: client
      run: npm install

    - name: Cache server dependencies
      id: server-cache
      uses: actions/cache@v4
      with:
        path: server/node_modules
        key: server-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('server/package-lock.json') }}
        restore-keys: |
          server-${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install server dependencies
      if: steps.server-cache.outputs.cache-hit != 'true'
      working-directory: server
      run: npm install

    - name: Build frontend
      working-directory: client
      run: npm run build

    - name: Check for runtime errors in backend
      working-directory: server
      env:
        DB_URI: ${{ secrets.DB_URI }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CLIENT_URL: 'http://localhost:3000'
      run: |
        npm start &
        SERVER_PID=$!
        sleep 10
        kill $SERVER_PID
        
    - name: Deploy backend to Render
      if: success()
      run: |
        curl -X POST ${{ secrets.RENDER_BACKEND_DEPLOY_URL }}

    - name: Deploy frontend to Render
      if: success()
      run: |
        curl -X POST ${{ secrets.RENDER_FRONTEND_DEPLOY_URL }}
